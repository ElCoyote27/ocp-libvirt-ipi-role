---

- name: Install KVM
  when: ocp_install  == "true"
  tags: remove
  become: true
  block:
    - name:  OpenShift cluster destroy
      shell: |
        {{ ocp_install_path }}/artifacts/openshift-installer-{{ ocp_release }}/openshift-install destroy cluster --dir {{ ocp_install_path }}/install/
        rm -rf {{ ocp_install_path }}/install/

- name: Install KVM
  when: kvm_configure  == "true"
  tags: remove
  become: true
  block:
    - name:  Unpublish
      ignore_errors: yes
      shell: |
        set -x
        # Unpublishing
        if [ {{ compute.0.replicas }} -ne 0 ]
        then
          API_VIP={{ ocp_api_vip }}
          APPS_VIP={{ ocp_apps_vip }}
        else
          API_VIP={{ ocp_api_vip }}
          APPS_VIP={{ ocp_api_vip }}
        fi
        if [ {{ lb }} == "true" ]
        then
          API_VIP={{ ocp_cluster_net_gw }}
          APPS_VIP={{ ocp_cluster_net_gw }}
        fi
        iptables -D INPUT -p tcp  --dport 6443 -j ACCEPT
        iptables -D INPUT -p tcp  --dport 80 -j ACCEPT
        iptables -D INPUT -p tcp  --dport 443 -j ACCEPT
        iptables -D PREROUTING -t nat -i {{ kvm_interface }} -p tcp --dport 6443 -j DNAT --to $API_VIP:6443
        iptables -D FORWARD -p tcp -d $API_VIP --dport 6443 -j ACCEPT
        iptables -D PREROUTING -t nat -i {{ kvm_interface }} -p tcp --dport 443 -j DNAT --to $APPS_VIP:443
        iptables -D FORWARD -p tcp -d $APPS_VIP --dport 443 -j ACCEPT
        iptables -D PREROUTING -t nat -i {{ kvm_interface }} -p tcp --dport 80 -j DNAT --to $APPS_VIP:80
        iptables -D FORWARD -p tcp -d $APPS_VIP --dport 80 -j ACCEPT
        iptables -D FORWARD -i any -o any -j ACCEPT
      when: kvm_firewall == "iptables"



    - name: Configure Firewalld
      become: true
      ignore_errors: yes
      shell: |
        IFACE=$(nmcli con show "{{ kvm_interface }}" | grep connection.interface-name | awk '{print $2}')
        ZONE_EXT=$(firewall-cmd --list-all-zones | grep -B 3 $IFACE | head -n 1 | awk '{print $1}')
        # Publishing
        if [ {{ compute.0.replicas }} -ne 0 ]
        then
          API_VIP={{ ocp_api_vip }}
          APPS_VIP={{ ocp_apps_vip }}
        else
          API_VIP={{ ocp_api_vip }}
          APPS_VIP={{ ocp_api_vip }}
        fi
        if [ {{ lb }} == "true" ]
        then
          API_VIP={{ ocp_cluster_net_gw }}
          APPS_VIP={{ ocp_cluster_net_gw }}
        fi
        firewall-cmd --permanent --remove-forward-port=port={{ ocp_node_port_api }}:proto=tcp:toport=6443:toaddr=$API_VIP --zone=$ZONE_EXT
        firewall-cmd --permanent --remove-forward-port=port={{ ocp_node_port_app_https }}:proto=tcp:toport=443:toaddr=$APPS_VIP --zone=$ZONE_EXT
        firewall-cmd --permanent --remove-forward-port=port={{ ocp_node_port_app_http }}:proto=tcp:toport=80:toaddr=$APPS_VIP --zone=$ZONE_EXT
        firewall-cmd --zone=libvirt --remove-port={{ ocp_node_port_app_https }}/tcp --permanent
        firewall-cmd --zone=libvirt --remove-port={{ ocp_node_port_app_http }}/tcp --permanent
        firewall-cmd --zone=libvirt --remove-service=ocpapi{{ metadata.name }} --permanent
        #firewall-cmd --zone=libvirt --remove-service=libvirt --permanent
        #firewall-cmd --zone=libvirt --remove-service=nfs --permanent
        #firewall-cmd --zone=libvirt --remove-service=dns --permanent
        #firewall-cmd --zone=libvirt --remove-service=libvirttcp --permanent
        #firewall-cmd --zone=libvirt --remove-rich-rule "rule family="ipv4" source address=0.0.0.0/0 accept"  --permanent
        firewall-cmd --zone=$ZONE_EXT --remove-port={{ ocp_node_port_app_https }}/tcp --permanent
        firewall-cmd --zone=$ZONE_EXT --remove-port={{ ocp_node_port_app_http }}/tcp --permanent
        firewall-cmd --zone=$ZONE_EXT --remove-service=ocpapi{{ metadata.name }} --permanent
        firewall-cmd --reload
      when: kvm_firewall == "firewalld"


    - name: Remove NFS OCP dirs
      ignore_errors: yes
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ nfs_export_path }}/{{ metadata.name }}"



    - name: Clean-up node
      when: ocp_clean  == "true"
      tags: remove
      become: true
      block:
        - name: Remove Load Balancer
          #when: lb  == "true"
          become: true
          block:
            - name: Remove packages
              when: remove_packages_on_destroy  == "true"
              yum:
                name:
                  - not_haproxy
                state: removed


        - name: Remove NFS
          #when: nfs_storage  == "true"
          become: true
          block:
            - name: Remove packages
              when: remove_packages_on_destroy  == "true"
              yum:
                state: removed
                name: "{{ item }}"
              with_items:
                - not_nfs-utils
                - not_rpcbind

        - name: Remove /etc/NetworkManager/conf.d/openshift.conf
          file:
            path: /etc/NetworkManager/conf.d/openshift.conf
            state: absent

        - name: Remove /etc/NetworkManager/dnsmasq.d/openshift.conf
          file:
            path: /etc/NetworkManager/dnsmasq.d/openshift.conf
            state: absent


        - name: Reload network
          become: true
          systemd:
            name: NetworkManager
            state: reloaded

        - name: Configure DNS external servers
          shell: 'echo "nameserver 8.8.8.8" >> /etc/resolv.conf'
